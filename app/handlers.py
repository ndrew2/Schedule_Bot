from datetime import datetime, timedelta

from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton


from app import dp
from app.models import User, Course, Lesson
from app.state import State
from app.utils import get_user, WEEKDAYS, to_state, StateFilter, escape_html


# @dp.message_handler(StateFilter(State.default))
# @get_user
# async def _(user: User, event: types.Message):
#


@dp.message_handler(Command("cancel"))
@get_user
async def _(user: User, event: types.Message):
    await event.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await to_state(user, State.default)


@dp.message_handler(Command("start"))
@get_user
async def _(user: User, event: types.Message):
    text = event.text

    if text == "/start" or text == "/start ":
        await event.answer(
            f"–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ü§ñ. –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏ /help.",
        )
    else:
        id = int(text[7:])

        course = await Course.filter(
             id=id,
        ).first()

        await course.participants.add(user)

        await event.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å "{course.name}"!')

    await to_state(user, State.default)

@dp.message_handler(Command("help"))
@get_user
async def _(user: User, event: types.Message):
    await event.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n\n"
        "/add_course - –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å\n"
        "/delete_course - –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å\n"
        "/change_course_name - –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞\n"
        "/get_link - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å\n"
        "/add_lesson - –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫ –≤ –∫—É—Ä—Å\n"
        "/my_courses - –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫—É—Ä—Å–æ–≤\n"
        "/show_schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )

@dp.message_handler(Command("add_course"))
@get_user
async def _(user: User, event: types.Message):
    await event.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await to_state(user, State.add_course_2)


@dp.message_handler(Command("delete_course"))
@get_user
async def _(user: User, event: types.Message):
    courses = await Course.filter(
        author=user
    )

    keyboard_inline = InlineKeyboardMarkup()

    for course in courses:
        keyboard_inline.insert(InlineKeyboardButton(text=f"{course.name}", callback_data=f"{course.id}"))

    await event.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard_inline)

    await to_state(user, State.delete_course_2)

@dp.message_handler(Command("change_course_name"))
@get_user
async def _(user: User, event: types.Message):
    await event.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å:")

    await to_state(user, State.change_course_name_2)


@dp.message_handler(Command("my_courses"))
@get_user
async def _(user: User, event: types.Message):
    courses = await user.participations.all()

    if courses is None:
        await event.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å.")
    else:
        ans = "–í–∞—à–∏ –∫—É—Ä—Å—ã: \n"

        for course in courses:
            ans += f"{course.name}" # (–∞–≤—Ç–æ—Ä:tg://user?id=)\n"

        await event.answer(ans)


@dp.message_handler(Command("add_lesson"))
@get_user
async def _(user: User, event: types.Message):
    # TODO: –∫–Ω–æ–ø–æ—á–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤

    courses = await Course.filter(
        author=user
    )

    keyboard_inline = InlineKeyboardMarkup()

    for course in courses:
        keyboard_inline.insert(InlineKeyboardButton(text=f"{course.name}", callback_data=f"{course.id}"))

    await event.reply("–°–ø–µ—Ä–≤–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=keyboard_inline)

    await to_state(user, State.add_lesson_2)


@dp.message_handler(Command("get_link"))
@get_user
async def _(user: User, event: types.Message):
    courses = await Course.filter(
        author=user
    )

    keyboard_inline = InlineKeyboardMarkup()

    for course in courses:
        keyboard_inline.insert(InlineKeyboardButton(text=f"{course.name}", callback_data=f"{course.id}"))

    await event.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=keyboard_inline)

    await to_state(user, State.get_link_2)


@dp.message_handler(Command("show_schedule"))
@get_user
async def _(user: User, event: types.Message):
    courses = await user.participations.all()

    schedule = [[] for i in range(7)]

    for course in courses:
        async for lesson in course.lessons:
            schedule[lesson.start_time.weekday()].append((lesson, course))

    weekday = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
               "–í—Ç–æ—Ä–Ω–∏–∫",
               "–°—Ä–µ–¥–∞",
               "–ß–µ—Ç–≤–µ—Ä–≥",
               "–ü—è—Ç–Ω–∏—Ü–∞",
               "–°—É–±–±–æ—Ç–∞",
               "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    ans = ''

    for i in range(7):
        if schedule[i]:
            ans = ans + '\n'.join([f"<b>{weekday[i]}</b>: \n"])

            lessons = []

            for (lesson, course) in schedule[i]:
                lessons.append((lesson.start_time, lesson.end_time, course.name))

            lessons.sort()

            for (lesson_start, lesson_end, course_name) in lessons:
                start_time = f"{lesson_start.hour}:{lesson_start.minute}"
                if (f"{lesson_start.minute}" == '0'):
                    start_time += '0'
                if (len(f"{lesson_start.minute}") < 2 and f"{lesson_start.minute}" != '0'):
                    start_time = start_time[:-1]
                    start_time += f'0{lesson_start.minute}'
                end_time = f"{lesson_end.hour}:{lesson_end.minute}"
                if (f"{lesson_end.minute}" == '0'):
                    end_time += '0'
                if (len(f"{lesson_end.minute}") < 2 and f"{lesson_end.minute}" != '0'):
                    end_time = end_time[:-1]
                    end_time += f'0{lesson_end.minute}'
                ans += f"{start_time} ‚Äî {end_time} (<i>{escape_html(course_name)}</i>)\n"
            ans += '\n'

    if ans == '':
        ans = "–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å."

    await event.answer(ans, parse_mode="HTML")


    await to_state(user, State.default)


@dp.message_handler(StateFilter(State.add_course_2))
@get_user
async def _(user: User, event: types.Message):
    course_name = event.text

    course = await Course.filter(
        name=course_name,
    ).first()

    if course:
        await event.answer("–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    course = await Course.create(
        name=event.text,
        author=user,
    )

    await course.participants.add(user)

    await event.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω")
    await to_state(user, State.default)


@dp.callback_query_handler(StateFilter(State.delete_course_2))
@get_user
async def _(user: User, event: types.CallbackQuery):
    course_id = int(event.data)

    course = await Course.filter(
        id=course_id
    ).first()

    await course.delete()

    await event.message.reply("–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω")
    await to_state(user, State.default)


@dp.message_handler(StateFilter(State.change_course_name_2))
@get_user
async def _(user: User, event: types.Message):
    course = await Course.filter(
        name=event.text,
        author=user
    ).first()

    if course is None:
        await event.answer("–í—ã–±—Ä–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (/cancel):")
        return

    await event.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")

    await to_state(
        user,
        State.change_course_name_3,
        {
            "course": course,
        },
    )


@dp.message_handler(StateFilter(State.change_course_name_3))
@get_user
async def _(user: User, event: types.Message):
    course = user.state_data["course"]

    ans = f'–ö—É—Ä—Å "{course.name}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: '

    course.name = event.text

    ans += f'{course.name}'

    await event.answer(ans)

    await to_state(user, State.default)


@dp.callback_query_handler(StateFilter(State.add_lesson_2))
@get_user
async def _(user: User, event: types.CallbackQuery):
    course_id = int(event.data)

    course = await Course.filter(
        id=course_id
    ).first()

    keyboard1 = ReplyKeyboardMarkup(resize_keyboard=True)

    for i in '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', \
             '–í—Ç–æ—Ä–Ω–∏–∫', \
             '–°—Ä–µ–¥–∞', \
             '–ß–µ—Ç–≤–µ—Ä–≥', \
             '–ü—è—Ç–Ω–∏—Ü–∞', \
             '–°—É–±–±–æ—Ç–∞', \
             '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
        keyboard1.insert(KeyboardButton(i))

    await event.message.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard1)

    await to_state(
        user,
        State.add_lesson_3,
        {
            "course_name": course.name,
        },
    )


@dp.message_handler(StateFilter(State.add_lesson_3))
@get_user
async def _(user: User, event: types.Message):
    weekday = WEEKDAYS[event.text.lower()]

    await event.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)", reply_markup=ReplyKeyboardRemove())

    await to_state(
        user,
        State.add_lesson_4,
        {
            **user.state_data,
            "weekday": weekday,
        },
    )


@dp.message_handler(StateFilter(State.add_lesson_4))
@get_user
async def _(user: User, event: types.Message):
    # TODO: –≤–∞–ª–∏–¥–∞—Ü–∏—è

    start_time = event.text

    if (start_time[1] == ':'):
        start_time = '0' + start_time

    if (len(start_time) == 4):
        start_time = start_time[:3] + '0' + start_time[-1]

    st_h = int(start_time[0]) * 10 + int(start_time[1])
    st_m = int(start_time[3]) * 10 + int(start_time[4])

    if (st_h < 0 or st_h > 24 or st_m < 0 or st_m > 59):
        await event.answer("–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    await event.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)")
    await to_state(
        user,
        State.add_lesson_5,
        {
            **user.state_data,
            "start_time": event.text,
        },
    )


BASE_DATE = datetime(2000, 1, 3)


@dp.message_handler(StateFilter(State.add_lesson_5))
@get_user
async def _(user: User, event: types.Message):
    end_time = event.text

    if (end_time[1] == ':'):
        end_time = '0' + end_time

    if (len(end_time) == 4):
        end_time = end_time[:3] + '0' + end_time[-1]

    end_h = int(end_time[0]) * 10 + int(end_time[1])
    end_m = int(end_time[3]) * 10 + int(end_time[4])

    if (end_h < 0 or end_h > 24 or end_m < 0 or end_m > 59):
        await event.answer("–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    weekday = user.state_data["weekday"]
    start_time = datetime.strptime(user.state_data["start_time"], "%H:%M")
    end_time = datetime.strptime(event.text, "%H:%M")

    if (start_time > end_time):
        await event.answer("–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    day = BASE_DATE + timedelta(days=weekday)
    start_datetime = day.replace(hour=start_time.hour, minute=start_time.minute)
    end_datetime = day.replace(hour=end_time.hour, minute=end_time.minute)

    course = await Course.filter(
        author=user,
        name=user.state_data["course_name"],
    ).first()

    await Lesson.create(
        start_time=start_datetime,
        end_time=end_datetime,
        course=course,
    )

    await event.answer("–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å")
    await to_state(user, State.default)


@dp.callback_query_handler(StateFilter(State.get_link_2))
@get_user
async def _(user: User, event: types.CallbackQuery):
    course_id = int(event.data)

    course = await Course.filter(
        id=course_id
    ).first()

    await event.answer(f"t.me/testov_test_testovich_bot?start={course.id}")
    await to_state(user, State.default)